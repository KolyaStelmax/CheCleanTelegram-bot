import Composer from 'telegraf/composer.js';
import { takeImageFromUrl } from './image-receiver.js';

export const botUseHandler = (ctx) => {
	ctx.replyWithMarkdown(
		`–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ CheClean. –Ø —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞—à–æ–º—É –º—ñ—Å—Ç—É üòä \n–î–ª—è *–ø–æ—á–∞—Ç–∫—É* —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /create \n–î–ª—è *–¥–æ–ø–æ–º–æ–≥–∏* –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /help \n–î–ª—è *–≤—ñ–¥–º—ñ–Ω–∏* –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel`
	);
	return ctx.wizard.next();
};

export const createCaseHandler = new Composer();
createCaseHandler.command('create', (ctx) => {
	ctx.replyWithMarkdown(
		`–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ –æ–ø–∏—Å, —Ñ–æ—Ç–æ —Ç–∞ –ª–æ–∫–∞—Ü—ñ—é –º—ñ—Å—Ü—è –ø–æ–¥—ñ—ó. –†–æ–±–∏ –≤—Å–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ, —Ç–æ–±—Ç–æ —Å–ø–æ—á–∞—Ç–∫—É –æ–ø–∏—Å, –ø–æ—Ç—ñ–º —Ñ–æ—Ç–æ, –∞ –≤ –∫—ñ–Ω—Ü—ñ –ª–æ–∫–∞—Ü—ñ—è.\n\n*–ß–µ–∫–∞—é –≤—ñ–¥ —Ç–µ–±–µ –æ–ø–∏—Å –º—ñ—Å—Ü—è.*`
	);
	return ctx.wizard.next();
});

export const textHandler = new Composer();
textHandler.on('text', (ctx) => {
	ctx.wizard.state.data = {};
	console.log(ctx.update.message.text);
	const description = ctx.update.message.text;
	ctx.wizard.state.data.description = description;
	ctx.reply('–ö—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –º—ñ—Å—Ü—è.');
	return ctx.wizard.next();
});
textHandler.use((ctx) => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ —Ç–∏ –±–∞—á–∏—à.'));

export const photoHandler = new Composer();
photoHandler.on('photo', async (ctx) => {
	const photosList = ctx.update.message.photo;
	const lastPhoto = photosList.length - 1;
	const biggestPhoto = photosList[lastPhoto];

	const url = await ctx.telegram.getFileLink(biggestPhoto);
	console.log(url);
	const image = await takeImageFromUrl(url);
	ctx.wizard.state.data.image = url;

	ctx.reply('–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞–π –º–µ–Ω—ñ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é.');
	return ctx.wizard.next();
});
photoHandler.use((ctx) => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ —Å–ø–æ—á–∞—Ç–∫—É —Ñ–æ—Ç–æ.'));

export const locationHandler = new Composer();
locationHandler.on('location', (ctx) => {
	const location = ctx.update.message.location;
	const createdCase = ctx.wizard.state.data;
	ctx.wizard.state.data.location = location;

	ctx.reply({ –û–ø–∏—Å: createdCase.description, –§–æ—Ç–æ: createdCase.image });
	ctx.reply('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Å–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É', {
		reply_markup: {
			inline_keyboard: [
				[ { text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'approved' }, { text: '–í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: 'declined' } ]
			]
		}
	});
	return ctx.wizard.next();
});
locationHandler.use((ctx) => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª–∏ –º–µ–Ω—ñ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é.'));

export const validateHandler = new Composer();
validateHandler.action('approved', (ctx) => {
	ctx.reply('–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É! –í–∞—à –∑–∞–ø–∏—Ç –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É.');
	return ctx.scene.leave();
});
validateHandler.action('declined', (ctx) => {
	ctx.reply('–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ :)');
	return ctx.scene.leave();
});
